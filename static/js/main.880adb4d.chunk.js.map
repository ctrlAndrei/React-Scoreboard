{"version":3,"sources":["components/Stats.jsx","components/Stopwatch.jsx","components/Header.jsx","components/Counter.jsx","components/Player.jsx","components/AddPlayerForm.jsx","App.js","serviceWorker.js","index.js"],"names":["Stats","props","react_default","a","createElement","className","nrPlayers","tScore","Stopwatch","state","isRunning","timer","handleStart","_this","setState","handleReset","_this2","this","interval","setInterval","counter","prev","clearInterval","onClick","Component","Header","components_Stats","components_Stopwatch","Counter","handleScoreChange","id","score","Player","removePlayer","name","components_Counter","AddPlayerFrom","value","changeHandler","ev","target","console","log","submitHandler","preventDefault","addPlayer","onSubmit","type","placeholder","onChange","App","players","direction","prevState","map","element","Object","objectSpread","index","arr","el","splice","forEach","i","toConsumableArray","nm","concat","length","components_Header","reduce","tot","elem","components_Player","key","toString","AddPlayerForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.880adb4d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nfunction Stats(props) {\r\n  return (\r\n    <table className=\"stats\">\r\n      <tbody>\r\n        <tr>\r\n          <td>Players:</td>\r\n          <td>{props.nrPlayers}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Total Points:</td>\r\n          <td>{props.tScore}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default Stats;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Stopwatch extends Component {\r\n  state = {\r\n    isRunning: false,\r\n    timer: 0\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => this.counter(), 500);\r\n  }\r\n\r\n  handleStart = () => {\r\n    this.setState({ isRunning: !this.state.isRunning });\r\n  };\r\n\r\n  counter() {\r\n    if (this.state.isRunning) {\r\n      this.setState(prev => ({ timer: prev.timer + 1 }));\r\n    }\r\n  }\r\n\r\n  handleReset = () => {\r\n    this.setState({ isRunning: false, timer: 0 });\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"stopwatch\">\r\n        <h2>Stopwatch</h2>\r\n        <span className=\"stopwatch-time\">{this.state.timer}</span>\r\n        <button onClick={this.handleStart}>\r\n          {this.state.isRunning ? \"Stop\" : \"Start\"}\r\n        </button>\r\n        <button onClick={this.handleReset}>Reset</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Stopwatch;\r\n","import React, { Component } from \"react\";\r\nimport Stats from \"./Stats\";\r\nimport Stopwatch from \"./Stopwatch\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <header>\r\n      <h1>Scoreboard</h1>\r\n      <Stats nrPlayers = {props.nrPlayers} tScore = {props.tScore} />\r\n      <Stopwatch/>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"counter\">\r\n        <button\r\n          className=\"counter-action decrement\"\r\n          onClick={() => {\r\n            this.props.handleScoreChange(this.props.id, -1);\r\n          }}\r\n        >\r\n          -\r\n        </button>\r\n        <span className=\"counter-score\">{this.props.score} </span>\r\n        <button\r\n          className=\"counter-action increment\"\r\n          onClick={() => {\r\n            this.props.handleScoreChange(this.props.id, 1);\r\n          }}\r\n        >\r\n          +\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./Counter\";\r\n\r\nfunction Player(props) {\r\n  return (\r\n    <div className=\"player\" id={props.id}>\r\n      <span className=\"player-name\">\r\n        <button className=\"remove-player\" onClick={props.removePlayer}>âœ–</button>\r\n        {props.name}\r\n      </span>\r\n      <Counter \r\n        handleScoreChange={props.handleScoreChange} \r\n        id={props.id}\r\n        score={props.score} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Player;\r\n","import React, { Component } from \"react\";\r\n\r\nclass AddPlayerFrom extends Component {\r\n  state = {\r\n    value: \"\"\r\n  };\r\n\r\n  changeHandler = ev => {\r\n    this.setState({\r\n      value: ev.target.value\r\n    });\r\n    console.log(this.state.value);\r\n  };\r\n\r\n  submitHandler = ev => {\r\n    ev.preventDefault();\r\n    if (this.state.value !== \"\") {\r\n      this.props.addPlayer(this.state.value);\r\n      this.setState({ value: \"\" });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.submitHandler}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter a player's name\"\r\n          value={this.state.value}\r\n          onChange={this.changeHandler}\r\n        />\r\n        <input type=\"submit\" value=\"Add Player\" />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddPlayerFrom;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Player from \"./components/Player\";\nimport AddPlayerForm from \"./components/AddPlayerForm\";\n\nclass App extends Component {\n  state = {\n    players: [\n      { id: 0, name: \"Guil\", score: 0 },\n      { id: 1, name: \"Treasure\", score: 0 },\n      { id: 2, name: \"Ahley\", score: 0 },\n      { id: 3, name: \"James\", score: 0 }\n    ],\n    \n  };\n  \n  \n  handleScoreChange = (id, direction) => {\n\n    this.setState(prevState => ({\n      players: prevState.players.map(element =>\n        element.id !== id\n          ? element\n          : { ...element, score: element.score + direction }\n      )\n    }));\n  };\n\n  removePlayer = index => {\n    let arr = this.state.players.map(el => el);\n    \n    arr.splice(index, 1);\n    arr.forEach((el, i) => {\n      el.id = i;\n    });\n    this.setState({ players: [...arr] });\n  };\n\n  addPlayer = (nm)=>{\n    \n    this.setState(prev=>({\n      players: [...prev.players,{id: prev.players.length, name: nm, score: 0}]\n    }));\n   \n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"root\">\n          <div className=\"scoreboard\">\n            <Header\n              nrPlayers={this.state.players.length}\n              tScore={this.state.players\n                .map(el => el.score)\n                .reduce((tot, elem) => {return tot + elem},0)}\n            />\n            {this.state.players.map(el => (\n              <Player\n                key={el.id.toString()}\n                id={el.id}\n                name={el.name}\n                score={el.score}\n                handleScoreChange={this.handleScoreChange}\n                removePlayer={() => {\n                  this.removePlayer(el.id);\n                }}\n              />\n            ))}\n            <AddPlayerForm addPlayer={this.addPlayer}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}